#ifndef UNITDATA_H
#define UNITDATA_H

#include "unitconv.h"
#include <math.h>

/* Physical constants */
#define LIGHTSPEED 299792458.0 /* metres per second */
#define GRAVCONST 6.67384e-11 /* newton-square-metres per kilogram squared */
#define PLANCKCONST 6.62606957e-34 /* joule-seconds */
#define H_BAR (PLANCKCONST / (2.0 * M_PI)) /* joule-seconds */

#define GRAVACC 9.80665 /* metres per second squared */
#define ATMOSPHERE 101325.0 /* pascals */
#define ELEMENTARY_CHARGE 1.60217653e-19 /* coulombs */

#define ELECTRON_MASS 9.10938215e-31 /* kilograms */
#define AVOGADRO_CONST 6.02214129e23 /* per mol */
#define GAS_CONST 8.3144621 /* J K^-1 mol^-1 */
#define BOLTZMANN_CONST (GAS_CONST/AVOGADRO_CONST) /* joules per kelvin */

#define PERMEABILITY (4.0*M_PI*1e-7) /* newtons per ampere squared */
#define IMPEDANCE (PERMEABILITY*LIGHTSPEED) /* ohms */
#define PERMITTIVITY (1.0/PERMEABILITY/LIGHTSPEED/LIGHTSPEED) /* farads per metre */

#define COULOMB_CONST (1.0/4.0/M_PI/PERMITTIVITY)
#define FINE_STRUCT (ELEMENTARY_CHARGE*ELEMENTARY_CHARGE*COULOMB_CONST/H_BAR/LIGHTSPEED) /* dimentionless */
#define RYDBERG_CONST (FINE_STRUCT*FINE_STRUCT*ELECTRON_MASS*LIGHTSPEED/2.0/PLANCKCONST)
#define BOHR_RADIUS (FINE_STRUCT/4.0/M_PI/RYDBERG_CONST) /* metres */

/* Length */
#define LIGHTSECOND_TO_METRE LIGHTSPEED
#define NAUTICAL_MILE_TO_METRE 1852
#define FOOT_TO_METRE 3.048e-1
#define INCH_TO_METRE (FOOT_TO_METRE/12)
#define CHAIN_TO_METRE (FOOT_TO_METRE*66)
#define MILE_TO_METRE (FOOT_TO_METRE*5280)
#define SURVEY_FOOT_TO_METRE (1200.0/3937.0)
#define CHINESE_FOOT_TO_METRE (1.0/3.0)
#define HK_FOOT_TO_METRE 3.71475e-1
#define JAPANESE_FOOT_TO_METRE (10.0/33.0)
#define PLANCK_LENGTH sqrt(H_BAR*GRAVCONST/LIGHTSPEED/LIGHTSPEED/LIGHTSPEED)

/* Area */
#define SQFOOT_TO_SQMETRE (HK_FOOT_TO_METRE*HK_FOOT_TO_METRE)
#define ACRE_TO_SQMETRE (CHAIN_TO_METRE*CHAIN_TO_METRE*10)
#define SURVEY_SQFOOT_TO_SQMETRE (SURVEY_FOOT_TO_METRE*SURVEY_FOOT_TO_METRE)
#define CHINESE_MU_TO_SQMETRE (2000.0/3.0)
#define CHINESE_SQFOOT_TO_SQMETRE (CHINESE_FOOT_TO_METRE*CHINESE_FOOT_TO_METRE)
#define JAPANESE_TSUBO_TO_SQMETRE (JAPANESE_FOOT_TO_METRE*JAPANESE_FOOT_TO_METRE*36)
#define PLANCK_AREA H_BAR*GRAVCONST/LIGHTSPEED/LIGHTSPEED/LIGHTSPEED

/* Volume */
#define CUINCH_TO_CUMETRE (INCH_TO_METRE*INCH_TO_METRE*INCH_TO_METRE)
#define CUFOOT_TO_CUMETRE (FOOT_TO_METRE*FOOT_TO_METRE*FOOT_TO_METRE)
#define CUMILE_TO_CUMETRE (MILE_TO_METRE*MILE_TO_METRE*MILE_TO_METRE)
#define GALLON_TO_CUMETRE 4.54609e-3
#define FL_OUNCE_TO_CUMETRE (GALLON_TO_CUMETRE/160.0)
#define GILL_TO_CUMETRE (FL_OUNCE_TO_CUMETRE*5)
#define BUSHEL_TO_CUMETRE (GALLON_TO_CUMETRE/8)
#define US_LVL_BUSHEL_TO_CUMETRE (CUINCH_TO_CUMETRE*2150.42)
#define US_DRY_GALLON_TO_CUMETRE (US_LVL_BUSHEL_TO_CUMETRE/8)
#define WINE_GALLON_TO_CUMETRE (CUINCH_TO_CUMETRE*231.0)
#define US_FL_OUNCE_TO_CUMETRE (WINE_GALLON_TO_CUMETRE/128.0)
#define JAPANESE_SHOH_TO_CUMETRE (2.401/1331.0)
#define PLANCK_VOLUME (PLANCK_AREA*PLANCK_LENGTH)

/* Angle */
#define RADIAN_TO_DEGREE (180.0/M_PI)

/* Mass */
#define POUND_AV_TO_KILOGRAM 4.5359237e-1
#define OUNCE_AV_TO_KILOGRAM (POUND_AV_TO_KILOGRAM/16)
#define GRAIN_TO_KILOGRAM (POUND_AV_TO_KILOGRAM/7000)
#define POUND_TROY_TO_KILOGRAM (GRAIN_TO_KILOGRAM*5760)
#define CATTY_TO_KILOGRAM 5e-1
#define HK_CATTY_TO_KILOGRAM 6.0478982e-1
#define JAPANESE_CATTY_TO_KILOGRAM 6e-1
#define PLANCK_MASS sqrt(LIGHTSPEED*H_BAR/GRAVCONST)

/* Time */
#define MINUTE_TO_SECOND 60.0
#define HOUR_TO_SECOND 3600.0
#define DAY_TO_SECOND 86400.0
#define MONTH_FL_TO_SECOND (DAY_TO_SECOND*30)
#define MONTH_HOL_TO_SECOND (DAY_TO_SECOND*29)
#define MONTH_SYN_TO_SECOND (DAY_TO_SECOND*29.530589)
#define YEAR_TO_SECOND (DAY_TO_SECOND*365.25)
#define YEAR_GR_TO_SECOND (DAY_TO_SECOND*365.2425)
#define YEAR_VAGUE_TO_SECOND (DAY_TO_SECOND*365)
#define YEAR_SID_TO_SECOND (DAY_TO_SECOND*365.256363)
#define YEAR_TROP_TO_SECOND (DAY_TO_SECOND*365.242190)
#define PLANCK_TIME sqrt(H_BAR*GRAVCONST/LIGHTSPEED/LIGHTSPEED/LIGHTSPEED/LIGHTSPEED/LIGHTSPEED)

/* Density */
#define MERCURY_DENSITY 1.35951e4
#define WATER_DENSITY 9.99972e2

/* Force */
#define LBF_TO_NEWTON (POUND_AV_TO_KILOGRAM*GRAVACC)
#define OZF_TO_NEWTON (OUNCE_AV_TO_KILOGRAM*GRAVACC)
#define POUNDAL_TO_NEWTON (POUND_AV_TO_KILOGRAM*FOOT_TO_METRE*FOOT_TO_METRE)
#define PLANCK_FORCE (LIGHTSPEED*LIGHTSPEED*LIGHTSPEED*LIGHTSPEED/GRAVCONST)
#define PLANCK_PRESSURE (LIGHTSPEED*LIGHTSPEED*LIGHTSPEED*LIGHTSPEED*LIGHTSPEED*LIGHTSPEED*LIGHTSPEED/H_BAR/GRAVCONST/GRAVCONST)

/* Pressure */
#define MMHG_TO_PASCAL (MERCURY_DENSITY*1e-3*GRAVACC)
#define FTHG_TO_PASCAL (MERCURY_DENSITY*FOOT_TO_METRE*GRAVACC)
#define MMH2O_TO_PASCAL (WATER_DENSITY*1e-3*GRAVACC)
#define FTH2O_TO_PASCAL (WATER_DENSITY*FOOT_TO_METRE*GRAVACC)
#define LBF_PER_SQFT_TO_PASCAL (LBF_TO_NEWTON/FOOT_TO_METRE/FOOT_TO_METRE)
#define LBF_PER_SQIN_TO_PASCAL (LBF_TO_NEWTON/INCH_TO_METRE/INCH_TO_METRE)
#define PDL_PER_SQFT_TO_PASCAL (POUNDAL_TO_NEWTON/FOOT_TO_METRE/FOOT_TO_METRE)

/* Energy */
#define ELECTRONVOLT_TO_JOULE 1.60217653e-19
#define WATTHOUR_TO_JOULE HOUR_TO_SECOND
#define CALORIE_IT_TO_JOULE 4.1868
#define CALORIE_TH_TO_JOULE 4.184
#define BTU_IT_TO_JOULE 1.05505585262e3
#define BTU_59F_TO_JOULE 1.054804e3
#define FOOTLBF_TO_JOULE 1.3558179483314004
#define HORSEPOWER_TO_JOULE (550.0*FOOTLBF_TO_JOULE)
#define RYDBERG_TO_JOULE (RYDBERG_CONST*PLANCKCONST*LIGHTSPEED)
#define HARTREE_TO_JOULE (RYDBERG_TO_JOULE*2.0)
#define PLANCK_ENERGY (PLANCK_MASS*LIGHTSPEED*LIGHTSPEED)

/* Mass-energy equivalence (E = m c^2) */
#define KILOGRAM_TO_ELECTRONVOLT 1.782661845e-36

/* Power */
#define PLANCK_POWER (LIGHTSPEED*LIGHTSPEED*LIGHTSPEED*LIGHTSPEED*LIGHTSPEED/GRAVCONST)

/* Temperature */
#define PLANCK_TEMPERATURE (PLANCK_MASS*LIGHTSPEED*LIGHTSPEED/BOLTZMANN_CONST)

/* Functions */
int conv_length(double, char *, unsigned int);
int conv_area(double, char *, unsigned int);
int conv_volume(double, char *, unsigned int);
int conv_angle(double, char *, unsigned int);
int conv_mass(double, char *, unsigned int);
int conv_time(double, char *, unsigned int);
int conv_force(double, char *, unsigned int);
int conv_pressure(double, char *, unsigned int);
int conv_energy(double, char *, unsigned int);
int conv_power(double, char *, unsigned int);
int conv_temperature(double, char *, unsigned int);

#endif /* UNITDATA_H */
